# This workflow will build a Java project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-java
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy Java project to Azure Function App

on:
  push:
    branches:
      - 'main'
env:
  AZURE_FUNCTIONAPP_NAME: 'm365-java-functions'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'powershell-functions'
  POM_XML_DIRECTORY: 'java-functions'        # set this to the directory which contains pom.xml file
  JAVA_VERSION: '17'                         # set this to the java version to use (e.g. '8', '11', '17')
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup Java Sdk ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: 'Restore Project Dependencies Using Mvn'
        shell: pwsh
        run: |
          pushd './${{ env.POM_XML_DIRECTORY }}'
          mvn clean package
          popd
        working-directory: java-functions

      - name: Terraform Init
        run: |
          terraform init
        working-directory: ./infrastructure

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan -refresh-only
        working-directory: ./infrastructure

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure

      - name: 'Run Java Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.POM_XML_DIRECTORY }}' # if there are multiple function apps in same project, then this path will be like './${{ env.POM_XML_DIRECTORY }}/target/azure-functions/${{ env.POM_FUNCTIONAPP_NAME }'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          respect-pom-xml: true

      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

#      - name: 'Run Powershell Azure Functions Action'
#        uses: Azure/functions-action@v1
#        id: fa-powershell
#        with:
#          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
#          package: powershell-functions/${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
#          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
